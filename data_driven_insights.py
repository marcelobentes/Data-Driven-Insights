# -*- coding: utf-8 -*-
"""Data-Driven Insights.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nZGSHKSPTz18Osiv6-AfRuiA28q4EPTz

üìò Instru√ß√£o ‚Äì Mini Projeto: Data-Driven Insights (M√≥dulo 01)
üßë‚Äçüíª Projeto
Voc√™ dever√° criar um projeto pr√°tico de explora√ß√£o e visualiza√ß√£o de dados com Python no Google Colab, utilizando uma das bases indicadas abaixo ou outra de sua escolha, desde que esteja no formato .csv.

üéØ Objetivo
Explorar, transformar e visualizar dados com base em estruturas do Python e bibliotecas como pandas, numpy e matplotlib, gerando insights descritivos a partir da an√°lise.

‚úÖ Entreg√°veis
Notebook Colab com o nome: data_driven_insights.ipynb

O notebook deve conter:

Uso de listas, dicion√°rios e tuplas com os dados

Estruturas condicionais (if/elif/else) e loops (for, while)

Manipula√ß√£o de colunas com pandas

Opera√ß√µes com arrays NumPy

Filtragens, agrupamentos e resumos com pandas

Gr√°ficos (linha, barras e dispers√£o) com matplotlib

Coment√°rios e insights ao longo do notebook usando Markdown

Um relat√≥rio final em Markdown com os principais aprendizados e descobertas

Publica√ß√£o no GitHub:

Criar um reposit√≥rio com o nome: data-driven-insights

Subir o notebook final no reposit√≥rio

üìä Bases de dados sugeridas
Voc√™ pode escolher uma das op√ß√µes abaixo ou outra de sua prefer√™ncia:

üéì Dados de desempenho escolar: https://archive.ics.uci.edu/dataset/320/student+performance

üõçÔ∏è Dados de vendas simuladas: https://www.kaggle.com/datasets/kyanyoga/sample-sales-data

Dica: certifique-se de entender bem as colunas da base escolhida antes de come√ßar a an√°lise.

ü¶Æ Conte√∫do Guiado
Abaixo voc√™ tem o conte√∫do guiado para ajudar no desenvolvimento do projeto.

Siga o passo-a-passo e suba seu projeto para o reposit√≥rio do Github.

1. Importa√ß√£o de Bibliotecas
Importe pandas, numpy e matplotlib.pyplot.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""2. Leitura e Explora√ß√£o Inicial da Base
Carregue o arquivo CSV escolhido usando pandas.
Mostre as 5 primeiras linhas.
Mostre o nome das colunas, a quantidade de linhas/colunas e tipos de dados detectados pelo pandas (.dtypes).
Explique em Markdown os principais tipos de dados encontrados (str, int, float, ...).
"""

#carregando um arquivo tempor√°rio para o notebook
from google.colab import files

# Abre o di√°logo para upload
uploaded = files.upload()

df = pd.read_csv("sales_data_sample.csv")  # Lendo o arquivo CSV

"""Mostrando os nomes das colunas, a quantidade de linhas/colunas e tipos de dados detectados pelo pandas (.dtypes)"""

print("Head")
print(df.head())
print("Shape")
print(df.shape)
print("Columns")
print(df.columns)
print("Dtypes")
print(df.dtypes)

"""Insights, verificado que a base possui 25 colunas e 2823 linhas, os tipos dos dados como: float, int e object, possui colunas com "NaN"

3. Listas, Dicion√°rios e Tuplas
Extraia uma coluna de interesse em uma lista Python e fa√ßa um loop imprimindo informa√ß√µes sobre cada item.
Monte um dicion√°rio relacionando dois campos importantes da base (ex: produto:categoria, filme:g√™nero, aluno:disciplina) e exiba 3 pares.
Crie uma tupla contendo tr√™s informa√ß√µes distintas de uma linha e imprima o resultado.
"""

print(df.head())

"""Usando a coluna CITY como exemplo"""

# Lista: Listando a coluna CITY
nomes = list(df['CITY'])
for nome in nomes[:5]:
    print(nome)

print(df['STATUS'],df['PRODUCTLINE'])

# Lista: Listando a coluna STATUS, para verifica quais s√£o os status
nomes = list(df['STATUS'].unique())
for nome in nomes[:50]:
    print(nome)

"""Usando dicionario com o exemplo das colunas COUNTRY e STATE"""

# Dicion√°rio: chave e valor, exemplo (nome:categoria)
dicionario = dict(zip(df['COUNTRY'][:3], df['STATE'][:3]))
print(dicionario)
# Se n√£o tiver outra coluna str, pode repetir 'Escolha_Coluna_STR'

"""Usando Tupla como exemplo das colunas PRODUCTLINE, STATUS e SALES"""

# Tupla: informa√ß√µes de uma linha
linha0 = df.iloc[0]
minha_tupla = (linha0['PRODUCTLINE'], linha0['STATUS'], linha0['SALES'])
print(minha_tupla)

"""Insight: analisando a coluna PRODUCTLINE, foi verificado que √© uma base de venda de varios tipos de veiculos como: Avi√£o, Navio, Carros etc.., com os status: Shipped, Disputed, In Process, Cancelled, On Hold, Resolved

4. Estruturas Condicionais e La√ßos
Escolha uma coluna num√©rica de interesse na base (exemplo: nota, pre√ßo, quantidade, etc) e utilize uma estrutura condicional (if/elif/else) para imprimir uma mensagem de acordo com o valor de um elemento (por exemplo, se √© alto, m√©dio ou baixo).
Use um la√ßo for para calcular a soma (ou outra opera√ß√£o, como m√©dia ou multiplica√ß√£o) dos primeiros 5 valores dessa coluna e mostre o resultado.
Empregue um la√ßo while para encontrar (ou contar) o primeiro valor da mesma coluna que atenda a uma determinada condi√ß√£o (por exemplo: maior que um certo n√∫mero, diferente de zero, etc) e exiba esse valor quando encontrado.
"""

print(df.head())

# Escolha uma coluna num√©rica adequada
coluna_numerica = 'PRICEEACH'
primeiro_valor = df[coluna_numerica][0]

#Verificando os valores da coluna
print(df[coluna_numerica].describe())

if primeiro_valor > 80.000000:
    print("Valor alto")
elif primeiro_valor > 50.000000:
    print("Valor intermedi√°rio")
else:
    print("Valor baixo")

# For para operar sobre n primeiros elementos de uma coluna num√©rica escolhida
soma = 0
lista = list(df[coluna_numerica][:5])
for n in lista:
    soma += n
print("Soma dos 5 primeiros valores:", soma)

print(lista)

# While: Encontrar o primeiro valor maior que um certo limite, definido de acordo com os dados
limite = 83.658544  # Ajuste conforme o contexto da coluna escolhida
i = 0
while i < len(lista) and lista[i] <= limite:
    i += 1
if i < len(lista):
    print("Primeiro valor >", limite, "encontrado:", lista[i])
else:
    print("Nenhum valor maior que", limite, "encontrado nos primeiros 5.")

print(len(lista))
print(i)

"""Insight: Usando a lista na coluna PRICEEACH, verifiquei nos 5 primeiros valores, 3 est√£o acima da m√©dia dos valores.
O primeiro valor √© 95.7

5. Operadores Aritm√©ticos e Manipula√ß√£o de Dados
Realize opera√ß√µes matem√°ticas (soma, subtra√ß√£o, multiplica√ß√£o ou divis√£o) entre colunas ou valores de interesse da base (ex: diferen√ßa de duas notas, pre√ßo com desconto, etc).
Crie uma nova coluna no DataFrame aplicando um c√°lculo simples.
"""

#Verificando o dataset
df.tail()

#Verificando os tipos de dados
print(df.dtypes)

if 'SALES' in df.columns and 'PRICEEACH' in df.columns:
    df['Diferenca'] = df['SALES'] - df['PRICEEACH']
    print(df[['SALES', 'PRICEEACH', 'Diferenca']].head())

# Exemplo: pre√ßo com desconto
if 'SALES' in df.columns:
    df['Desconto'] = df['SALES'] * 0.1
    print(df[['SALES', 'Desconto']].head())

"""Insight: vericando a diferen√ßa da vendas pela o pre√ßo da unidade, nas 5 primeiras linha apresentou grande diferen√ßa, devido a quantidades de unidades vendidas. criado a uma coluna de desconto, aplicando 10% em cada valor das vendas na coluna 'SALES'

6. NumPy e Arrays Num√©ricos
Crie um array NumPy a partir de uma coluna num√©rica da base.
Realize pelo menos duas opera√ß√µes vetorizadas com esse array (ex: somar, multiplicar, elevar ao quadrado elementos).
Mostre como acessar, modificar e exibir partes do array (fatiamento/slicing ou indexa√ß√£o).
Mostre como fazer uma opera√ß√£o agregada, como soma ou m√©dia, sobre o array.
"""

array = np.array(df['PRICEEACH'])

# Opera√ß√µes NumPy
array_somado = array + 10
array_quadrado = array ** 2
array_filtrado = array[array < 83]
array_valor_menos = array - 20
print(array[:5])
print("Somado + 10 em cada valor do array",array_somado[:5])
print("Elevado cada valor ao quadrado no array",array_quadrado[:5])
print("Filtrando os valores menores que 83",array_filtrado[:5])
print("Valor menos 20 em cada valor do array",array_valor_menos[:5])

print("Soma dos elementos:", array.sum())
print("M√©dia dos elementos:", array.mean())

"""Insight: utilizando o array, posso aplica uma aumento no valor unitario em cada produto, utilizando exemplo de soma e media no array.
Filtrando os valores menores que a media, aplicando uma redu√ß√£o de -20 em cada valor unitario.

7. Acesso e Manipula√ß√£o de Dados com Pandas
Selecione linhas/colunas espec√≠ficas usando .loc, .iloc ou filtrando por condi√ß√£o.
Use algum m√©todo de pandas para contar ou agrupar informa√ß√µes simples (ex: .value_counts(), .groupby()), mostrando o resultado em Markdown.
Crie uma pequena an√°lise agregada interessante (ex: n√∫mero de filmes por pa√≠s, quantidade de alunos por escola, vendas por categoria).
"""

print(df.head())

#Usando o loc como exemplo das primeiras 5 linhas
df.loc[0:5, ['QUANTITYORDERED','PRICEEACH','PRODUCTLINE','SALES']]

#Usando o iloc como exemplo das primeiras 5 linhas e as 4 primeiras colunas
df.iloc[0:5, 0:3]

print(df.groupby('PRODUCTLINE')['SALES'].sum())
print(df.groupby('PRODUCTLINE')['QUANTITYORDERED'].sum())
#

"""Insight: separando os dados linha de produ√ß√£o, com a quantidade de pedidos, valores unitario e valores das vendas, verificando o produto Classic Cars teve maior quantidade de pedidos.

8. Visualiza√ß√£o de Dados
Obrigat√≥rio gerar pelo menos 1 gr√°fico de cada tipo b√°sico:
Gr√°fico de Linha: ilustrando tend√™ncias/s√©ries temporais quando poss√≠vel.
Gr√°fico de Barras: comparando categorias relevantes.
Gr√°fico de Dispers√£o: mostrando a rela√ß√£o entre duas vari√°veis num√©ricas.
Se algum dos gr√°ficos n√£o for aplic√°vel √† sua base, crie (ou simule) dados para mostrar que compreendeu o recurso.
Para cada gr√°fico, escreva em Markdown um coment√°rio sobre o que ele mostra.
"""

df.dtypes

# Gr√°fico de Linha (ex: evolu√ß√£o temporal; use 'Data' se houver)

if 'ORDERDATE' in df.columns and 'SALES' in df.columns:
    df.groupby('ORDERDATE')['SALES'].sum().plot(kind='line')
    plt.title('Evolu√ß√£o no tempo')
    plt.xlabel('Date')
    plt.ylabel('SALES')
    plt.show()

"""Gr√°fico de quantidade de vendas pela data"""

# Gr√°fico de Barras (categorias)
if 'COUNTRY' in df.columns and 'QUANTITYORDERED' in df.columns:
    df.groupby('COUNTRY')['QUANTITYORDERED'].sum().plot(kind='bar')
    plt.title('Total por categoria')
    plt.xlabel('COUNTRY')
    plt.ylabel('QUANTITYORDERED')
    plt.show()

"""Insight: Gr√°fico de quantidade de pedidos por pais, mostrando que o Pais USA tem a maior quandidade de pedidos."""

# Gr√°fico de Dispers√£o (duas num√©ricas)
if 'QUANTITYORDERED' in df.columns and 'SALES' in df.columns:
    plt.scatter(df['QUANTITYORDERED'], df['SALES'])
    plt.title('Dispers√£o')
    plt.xlabel('QUANTITYORDERED')
    plt.ylabel('SALES')
    plt.show()

"""Insight: Gr√°fico de dispers√£o a quantidade de pedidos pela vendas, verificado que a dispes√£o esta em torno de 20 a 50 pedidos com valores de vendas de 1000 a 8000

9. Relat√≥rio e Insights
Ap√≥s os usos de listas, dicion√°rios, tuplas, opera√ß√µes, agrupamentos e gr√°ficos, escreva em Markdown sempre que descobrir algo interessante, curioso ou surpreendente.

Inclua um relat√≥rio final em Markdown:

Neste projeto, explorei a base sales_data_sample.csv, que mostra a vendas de varios tipos de veiculos como: avi√£o, navios, carros, motos, etc..,
com os status: Shipped, Disputed, In Process, Cancelled, On Hold, Resolved.
Usando a lista na coluna PRICEEACH, verifiquei nos 5 primeiros valores, 3 est√£o acima da m√©dia dos valores que √© 83. O primeiro valor √© 95.7
Verificando a diferen√ßa da vendas pela o pre√ßo da unidade, nas 5 primeiras linha apresentou grande diferen√ßa, devido a quantidades de unidades vendidas. criado a uma coluna de desconto, aplicando 10% em cada valor das vendas na coluna 'SALES'.
Utilizando o array, posso aplica uma aumento no valor unitario em cada produto, utilizando exemplo de soma e media no array. Filtrando os valores menores que a media, aplicando uma redu√ß√£o de -20 em cada valor unitario.
Separando os dados linha de produ√ß√£o, com a quantidade de pedidos, valores unit√°rio e valores das vendas, verificando o produto Classic Cars teve maior quantidade de pedidos, gr√°fico de quantidade de pedidos por pais, mostrando que o Pais USA tem a maior quandidade de pedidos e o gr√°fico de dispers√£o a quantidade de pedidos pela vendas, verificado que a dispes√£o esta em torno de 20 a 50 pedidos com valores de vendas de 1000 a 8000.
"""